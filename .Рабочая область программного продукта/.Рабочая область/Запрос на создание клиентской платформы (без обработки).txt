На изображение выглядит примерный дизайн веб-приложения "Универсальная платформа образования Knowledge+". Он должен работать на React. Планируется использовать веб-приложение с протоколом HTTPS, так что это тоже стоит учесть.

Разработка:

- Регистрацию:
Регистрация состоит из 3 полей. Первое поле логин (не должно быть пустотым или с использованием различных спец символов). Второе поле пароль, а также третье поле повторить пароля (пароль должен быть не меньше 6 символов и не должен повторяться с логином). Также при создании, пользователь должен обязательно поставить галочку, что "Я ознакомлен и согласен с политикой компании" при нажатие на этот текст, пользователь может сказать PDF файл при нажатие на "политику компании". Если он не на жмет, то кнопка является не активной. 
Если все условия выполнены, то начинается проверка на наличие данного логина в базе данных PostgreSQL в таблице username, если логин занят, то пользователю в окне регистрации высвечивается уведомление об ошибки и подсвечивается поле. Если логин не занят, то проверяется пароль. Пароли должны обсолютно совпадать в полях. Если поля совпадают, то создается запись в таблицу username с помощью ASP.NET API, также отправляется дата без времени, и отправляется значение 2 в атрибут idrole. Пароль должен отправиться в виде хэша.

- Авторизация:
Авторизация состоит из двух полей. Первое поле логин. Второе поле пароль. Пароль в PostgreSQL хранится в виде хэша, так что нужно перевести пароль из хеша в правильный его вид.
После авторизации вместо кнопок войти и регистрация, должно быть окно профиля, где написан логин (если логин длинный, то немного пишется и ставятся "...") и под ним расположена кнопка выйти.
При нажатие на кнопку выйти, пользователя спросят. Хочет ли он выйти из профиля, если да, то его перенаправляет на главную страницу. Система должна проверять, если пользователь вышел, то он уже не сможет вернуться обратно как авторизованный, ему нужно снова авторизоваться в системе.
При нажатие на имя пользователя, то откроется окно профиль пользователя, где будет показан логин и пароль в виде "*". Пользователь может менять пароль, но не логин. При нажатие изменить пароль, процесс является похожий при регистрации, только без логина. Если всё нормально, то в таблице username изменяются данные данного пользователя. После обновления данных, система не должна выбрасывать пользователя из системы, но должна обновиться страница (данные).

- Доступ:
Без авторизации пользователь может просматривать список курсов, использовать фильтры и поисковик, но при нажатия на карточки курса, будет уведомление, что для "продолжения требуется авторизироваться".
Если пользователь авторизован, у него появятся видимые кнопки "Редактор курсов", "История курсов".

- Запрещено: создание, редактирование, просмотр курсов. Можно просматривать список, использовать поисковик и сортировку по фильтру, но если ты не авторизован открыть, создать, редактировать курс нельзя, нужно зарегистрироваться или авторизоваться.

- Безопасность:
Валидация всех входных данных на сервере.
Защита от XSS (санитизация Markdown).
Ограничение прав: редактировать документ может только автор.

- Должна быть оптимизация  веб-приложения под размеры и устройства пользователя.

- Редактор курсов:
Пользователю после авторизации откроется страница со списком созданных им курсом из таблицы course, а также будет только поисковик (поисковик должен искать не прямо с 100% точностью, то есть поисковик ищет приближенно), поисковик должен быть автоматическим без кнопки "поиск". Список состоит из название курса и дата создания курса и кнопки "редактировать" или "удалить". При нажимании кнопки редактировании откроется редактор. При нажимании кнопки удалить, система спросит пользователя, "Выполняется процесс удаления курса (название курса). Продолжить?", если пользователь нажмет "отмена" то окно закроется, если нажмет "выполнить", то пользователя дополнительно запросят ввести пароль пользователя, и если он совпадает из таблицы username, то выполняется удаление записи о данном курсе в таблице course. Если запрос будет выполнен успешно, то страница должна обновиться но не выйти из пользователя и показать обновленный список. Если запрос был не выполнен, происходит уведомление об "неизвестной ошибки" и после нажатие кнопки "Ок" окно закрывается, а список обновляется автоматически  При нажатие кнопки редактировать, у пользователя будет откроется редактор курса на подобии создания курса, однако данные и страницы курса уже будут заполнены и загружены автоматически. Если пользователь нажимает кнопку создать курс, то открывается редактор курсов.

- Создание курса: 
Данную функцию может использовать только авторизованный пользователь. Нужно реализовать правильное создание курса, так как пользователь может создавать дополнительные страницы для курса и могут возникнуть проблемы с загрузкой данных в базу данных.

Поле создания должно быть большим.

Шаг 1: Начальные данные
Пользователь вводит: Название (обязательное поле, валидация на пустоту). Описание (опционально). Иконка (опционально): Форматы: JPEG, PNG. Макс. размер: 6 МБ. Разрешение: 300x300 пикселей (автоматическое масштабирование при загрузке). Кнопка "Продолжить" активируется только после заполнения названия.

Шаг 2: Редактор Markdown
Панель инструментов:
Кнопки для добавления заголовков, списков, жирного/курсивного текста, ссылок, изображений, видео. Визуальный предпросмотр (split-view: редактор + предпросмотр). Загрузка медиа: Изображения: JPEG, PNG, GIF, WebP (макс. 10 МБ). Видео: MP4, AVI, MOV (макс. 100 МБ). Файлы сохраняются в Markdown как относительные ссылки или Base64 (в зависимости от размера). 
Описание:
Пользователь пишет статью и ему может потребоваться разделить материал на две и более части, то есть он может создать новую страницу курса, где будет использоваться тот же редактор. Должен быть рабочий переход, который полностью помнит все данные на прошлых страницах (это можно реализовать как-то через кеш браузера или что-то другое..), а также реализуй выбор порядка страниц, чтобы пользователь в любой момент мог изменить последовательность на другую. Вообщем нужно реализовать удобное и верное решение.

Шаг 3: Завершение создания
Пользователь выбирает: Тип доступа: Бесплатный / Платный (данные из PostgreSQL таблицы monetizationcourse), если платный, то появляется область вода значения: стоимость от 1000 до 20 000 (ввод только чисел). Категория: Выбор из списка (данные из PostgreSQL таблицы category). Возрастное ограничение: Выбор из списка (данные из PostgreSQL таблицы agepeople). Уровень сложности: Выбор из списка (данные из PostgreSQL таблицы levelknowledge). 
Данные сохраняются в PostgreSQL через ASP.NET API:
Нужно создать правильную последовательность отправки данных, так как сначала нужно загрузить данные курса в таблицу course, после нужно как-то правильно определить idcourse нужного курса и сохранить все markdown страницы с учётом последовательности страниц установленной пользователем загрузить файлы в формате bytea в таблицу pages.

- Список курсов:
Авторизированный и не авторизированный пользователь может открыть список курсов. На данной странице пользователь может использовать поисковик (поисковик должен искать не прямо с 100% точностью, то есть поисковик ищет приближенно), поисковик должен быть автоматическим, без кнопки. Также можно будет нажать на странице кнопку фильтр, где пользователь может отсортировать по типу доступа бесплатно/платный (если выбрал платный, то все значения должны быть только числовыми, пользователь указывает стоимость от минимального к максимальной стоимость от 1000 до 20000), отсортировать по категории (данные из PostgreSQL таблицы category), возрастное ограничение: Выбор из списка (данные из PostgreSQL таблицы agepeople). уровень сложности: Выбор из списка (данные из PostgreSQL таблицы levelknowledge).
Карточка курса должна помечаться бесплатный или стоимость курса. Также на карточке можно нажать кнопку "добавить в избранные" (данную возможность может использовать только авторизованный пользователь. При нажатии будет появляться уведомление о том, что нужно авторизироваться или зарегестрироваться).
Если пользователь авторизованный, то в таблице favoritesandhistory добавляется запись о пользователи iduserame и idcourse в атрибут viewed устанавливается 1, если он просто нажал на этот курс, но не нажал на кнопку "добавить в избранные", то аналогично создается запись в таблице favoritesandhistory добавляется запись о пользователи iduserame и idcourse в атрибут viewed устанавливается 0. Кнопка "добавить в избранные" имеет отличительные свойства. Проверяется из таблицы favoritesandhistory в атрибуте viewed, если значение 1 то кнопка закрашена, если значение 0 то кнопка не закрашена.

- История курсов:
Возможность использование только у авторизированных пользователей. Этот список похож на "Список курсов", только без фильтров, но есть поисковик, поисковик должен быть автоматическим, без кнопки. Здесь отображается список курсов из таблицы favoritesandhistory, отображение карточке и взаимодействии схожа как у "Список курсов". 

- Просмотр курса:
Поле просмотра должно быть большим.

При открытие курса, будет появляться маленькая карточка описания этого курса. В карточке указывается название курса, описание, тип доступности (бесплатно/платный) и рядом указывается цена курса. Также указывается количество страниц курса, категория, возрастное ограничение, уровень сложности. на этой карточке будет две кнопки отмена/(оплатить или открыть), выбор статуса кнопки проверяется в таблице pay, если там есть запись idcourse и idusername, то кнопка будет "открыть", если не будет записи в таблице pay этого курса и пользователя, то тогда будет кнопка "оплатить". При нажатие на кнопку "оплатить", появится по верх карточки окно с вводом данных и кнопкой "оплатить" и "отменить". При нажатие кнопки "отменить", закрывается мини окно с оплатой. На окне должны быть поля ввод номер карты (ввод должен быть только числами и должно быть не менее 16 чисел), месяц и год карты (проверять на год, год должен быть не меньше 2025, а месяц должен быть не раньше июня), CVC код (ввод должен быть только числами и должно быть не менее 3 чисел). Если все поля заполнены верно, то кнопка "оплатить" будет активной и при нажатии на конпку, в таблице pay, будет указан idusername и idcourse, если запрос выполнен, то окно оплаты закрывается и кнопка оплатить становится "открыть", если что-то пошло не так, окно остается открытым и происходит уведомление об "неизвестной ошибки".
При нажатие кнопки "открыть", открывается курс. Страницы загружаются из PostgreSQL из таблицы pages загружаются страницы из атрибута file типа данных Bytea, должна быть только возможность view (предпросмотр) без отображение синтексиса. Первая страница загружается по значению в атрибуте numberpage. Должна быть панель с количеством страницами и возможностью переключаться между ними, страницы должны быть отсортированы по атрибуту numberpage в таблице pages.


Дополнительно прикладываю SQL запрос, чтобы понимать какие элементы должны получать данные из базы данных PostgreSQL с помощью ASP.NET API:

Название базы данных: odbDiplomProject

CREATE TABLE role (
    idrole SERIAL PRIMARY KEY,
    title TEXT
);

CREATE TABLE username (
    idusername BIGSERIAL PRIMARY KEY,
    login VARCHAR(50),
    password TEXT,
    dateaddaccount DATE,
    idrole INTEGER REFERENCES role(idrole) ON DELETE CASCADE
);

CREATE TABLE monetizationcourse (
    idmonetizationcourse SERIAL PRIMARY KEY,
    type VARCHAR(25)
);

CREATE TABLE levelknowledge (
    idlevelknowledge SERIAL PRIMARY KEY,
    type VARCHAR(25)
);

CREATE TABLE category (
    idcategory SERIAL PRIMARY KEY,
    type VARCHAR(25)
);

CREATE TABLE agepeople (
    idagepeople SERIAL PRIMARY KEY,
    type VARCHAR(3)
);

CREATE TABLE course (
    idcourse BIGSERIAL PRIMARY KEY,
    title VARCHAR(100),
    description TEXT,
    icon BYTEA,
    dateadd DATE,
    idusername BIGINT REFERENCES username(idusername) ON DELETE CASCADE,
    idmonetizationcourse INTEGER REFERENCES monetizationcourse(idmonetizationcourse) ON DELETE CASCADE,
    idlevelknowledge INTEGER REFERENCES levelknowledge(idlevelknowledge) ON DELETE CASCADE,
    idcategory INTEGER REFERENCES category(idcategory) ON DELETE CASCADE,
    idagepeople INTEGER REFERENCES agepeople(idagepeople) ON DELETE CASCADE
);

CREATE TABLE pages (
    idpages BIGSERIAL PRIMARY KEY,
    numberpage INT,
    file BYTEA,
    idcourse BIGINT REFERENCES course(idcourse) ON DELETE CASCADE
);

CREATE TABLE favoritesandhistory (
    idfavoritesandhistory SERIAL PRIMARY KEY,
    viewed INT,
    idcourse BIGINT REFERENCES course(idcourse) ON DELETE CASCADE,
    idusername BIGINT REFERENCES username(idusername) ON DELETE CASCADE
);

CREATE TABLE pay (
    idpay BIGSERIAL PRIMARY KEY,
    idcourse BIGINT REFERENCES course(idcourse) ON DELETE CASCADE,
    idusername BIGINT REFERENCES username(idusername) ON DELETE CASCADE
);